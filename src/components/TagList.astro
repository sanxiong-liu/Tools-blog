---
import { cva } from 'class-variance-authority';

import Tag from '@/components/Tag.astro';
import { ROUTES } from '@/constants/routes';

import type { TagProps } from '@/components/Tag.astro';
import type { HTMLAttributes } from 'astro/types';
import type { VariantProps } from 'class-variance-authority';

const tagListVariants = cva('not-prose inline-flex items-center flex-wrap', {
  variants: {
    variant: { text: '', solid: '' },
    size: { sm: 'gap-2', md: 'gap-3', lg: 'gap-4' },
  },
});

export interface Props extends HTMLAttributes<'ul'>, VariantProps<typeof tagListVariants> {
  tags: string[];
  tagProps?: TagProps;
}

const {
  tags = [],
  tagProps,
  variant = 'solid',
  size = 'sm',
  class: className,
  ...props
} = Astro.props;

const tagLinks = tags.map((tagItem) => ({ href: `${ROUTES.TAGS}${tagItem}`, text: `#${tagItem}` }));
---

{
  tagLinks.length > 0 && (
    <ul {...props} class={tagListVariants({ variant, size, className })}>
      {tagLinks.map(({ href, text }) => (
        <li class="inline-flex items-center">
          <Tag {size} {variant} {href} {...tagProps}>
            {text}
          </Tag>
        </li>
      ))}
    </ul>
  )
}
